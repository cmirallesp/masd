include: Common.2apl;
include: Seller.2apl;

beliefs:
  % price of production of each type of products
  prices([
    [prod1,10],
    [prod2,15],
    [prod3,5]]).

  money(10).
  % do we have enough money for producing product ProdId
  enoughMoney(ProdId) :- prices(Prices), iEnoughMoney(ProdId,Prices).
  iEnoughMoney(_,[],_) :- fail.
  iEnoughMoney(ProdId,[[ProdId,Price] | _]) :- money(M),
                                              M >= Price,!.
  iEnoughMoney(ProdId,[_|Tail]) :- iEnoughMoney(ProdId, Tail).
  
  % Gets the actual price of product ProdId in Price
  priceProduct(ProdId,Price) :- prices(Lst), iPriceProduct(ProdId,Lst,Price).
  iPriceProduct(_,[],_) :- fail.
  iPriceProduct(ProdId, [[ProdId,Price]|_], Price) :- !.
  iPriceProduct(ProdId,[_ | Tail], Price) :- iPriceProduct(ProdId,Tail,Price).

goals:
  produce(prod3,5).

pgrules:
  produce(ProdId,QualityCla) <- enoughMoney(ProdId) |
  {
    @env(produceProduct(ProdId,QualityCla),Y);
    if B([ProdId,QualityAct]=Y) then {  
      +product(ProdId,QualityCla,QualityAct);
      if B(priceProduct(ProdId,Price) and money(M)) then{
        UpdateMoney(M-Price);
      }
    }
  }
pcrules:
  event(name(Name), env) <- true | {
    +name(Name);
  }

  event(updateMoney(Qty), env) <- true | {
    UpdateMoney(Qty);
  }
