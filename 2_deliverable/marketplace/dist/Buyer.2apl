include: Common.2apl;

%plans:
  %wait(5);
  %initBuyProtocol(0, tablet, 5, 10, producer);

beliefs:
  bestProduct([], Best, Best).
  bestProduct([H|T], BestNow, Best):-
    H = [ProductId, Type, Quality, Price, Seller], is(Score, Quality/Price),
    Score > BestNow, bestProduct(T, H, Best), !.
  bestProduct([_|T], BestNow, Best):- bestProduct(T, BestNow, Best).
  bestProduct([H|T], Best):- bestProduct(T, H, Best).
  role(store).

goals:
  stock(tablet, 1).

pgrules:
  stock(Type, Stock) <- not(buyProtocolOn(Type)) |
  {
    @env(searchProduct(Type), Products);
    B(bestProduct(Products, [ProductId, Type, Quality, Price, Seller]));
    initBuyProtocol(ProductId, Type, Quality, Price, Seller);
  }

  sendReview(Prod,Score) <- true |
  { % request to the reviewer a new review
    send(reviewer, inform, addReview(Prod, Score));
    dropgoal(sendReview(Prod, Score));
  }

pcrules:
  initBuyProtocol(ProductId, Type, Quality, Price, Seller) <-
    not(confirmationPending(ProductId, _, _, _, _)) and
    enoughMoney(Price) |
  {
    +buyProtocolOn(Type);
    send(Seller, request, wantToBuy(ProductId));
    +confirmationPending(ProductId, Type, Quality, Price, Seller);
  }

  message(Seller, inform, _, _, buyAccepted(ProductId)) <-
    confirmationPending(ProductId, Type, Quality, Price, Seller) |
  {
    +waitingArrival(ProductId, Type, Quality, Price, Seller);
    -confirmationPending(ProductId, Type, Quality, Price, Seller);
    @env(shipMoney(Seller, ProductId, Price));
    B(money(MoneyBefore) and is(MoneyAfter, MoneyBefore - Price));
    UpdateMoney(MoneyAfter);
  }

  message(Seller, refuse, _, _, buyRefused(ProductId)) <-
    confirmationPending(ProductId, Type, Quality, Price, Seller) |
  {
    -confirmationPending(ProductId, Type, Quality, Price, Seller);
    -buyProtocolOn(Type);
  }

  event(productTransfer(ProductId, Type, Quality), env) <- true | {
    AddItem(ProductId, Type, Quality);
    if (B(waitingArrival(ProductId, Type, ExpectedQuality, Price, Seller))) {
      -waitingArrival(ProductId, Type, ExpectedQuality, Price, Seller);
      % Do something if the Quality is worse than the ExpectedQuality
      % Do something else if it's the same
      -buyProtocolOn(Type);
      B(is(Quality2,5));
      B(is(P_realised,abs(Quality2-ExpectedQuality )/10));
      if(B( roll(P_realised))){
        % realised that Quality is worse than the ExpectedQuality
        B(is(Score, random(4.0)));
        adoptz(sendReview(Seller, Score));        
      }
      else{
        % not realised that Quality is worse than the ExpectedQuality
        B(is(Score, (5+random(5.0))));
        adoptz(sendReview(Seller,Score));
      }
    }
  }


prrules:
  B(bestProduct(Products, Best)); REST; <- true |
  {
    wait(3);
  }

%goals:
  %searchProduct(prod1).
  %searchProduct(prod2).
  %sendReview(prod1, 10). 
  %sendReview(prod1, 12). 
  %sendReview(prod2, 12). 

  %getReviews(prod1).
  %getReviews(prod2).
  

%beliefupdates:
  %% update searchedTimes first time
  %{not searchedTimes(Desc,_)} 
    %UpdateSearchedTimes(Desc) 
  %{searchedTimes(Desc,1)}

  %% updated searchedTimes
  %{searchedTimes(Desc,N)} 
    %UpdateSearchedTimes(Desc) 
  %{ not searchedTimes(Desc,N), searchedTimes(Desc,N+1) }
  
  %% update productFounds first time
  %{not productFounds(Id,_,_), searchedTimes(Desc,N)} 
    %UpdateFounds(Id,Desc,Qty) 
  %{productFounds(Id,Desc,Qty), not searchedTimes(Desc,N)}

  %% update productFounds 
  %{productFounds(Id,_,OldQty), searchedTimes(Desc,N)} 
    %UpdateFounds(Id,Desc,Qty) 
  %{not productFounds(Id,_,OldQty), productFounds(Id,Desc,Qty), not searchedTimes(Desc,N)}

  %% update reviews first time
  %{not reviews(Product, ListOfReviews)}
    %UpdateReviews(Product, ListOfReviews)
  %{ reviews(Product, ListOfReviews)}

  %% update reviews 
  %{ reviews(Product, ListOfReviews)}
    %UpdateReviews(Product, NewListOfReviews)
  %{ not reviews(Product, ListOfReviews), reviews(Product, NewListOfReviews) }

%pgrules:
  %searchProduct(Desc) <- true | 
  %{
    %@env(searchProduct(Desc), Y );

    %if B([Id,Desc, Qty] = Y) then
    %{
      %UpdateFounds(Id,Desc,Qty);
      %dropgoal(searchProduct(Desc));
    %}
    %else{
      %UpdateSearchedTimes(Desc);
      %if B(searchedTimes(Desc,10)){
        %-searchedTimes(Desc,10);
        %dropgoal(searchProduct(Desc));
      %}
    %}
  %}

  %getReviews(Product) <- true |
  %{ 
    %send(reviewer, request, getReviews(Product));
    %dropgoal(getReviews(Product));
  %}

 
%pcrules:
  %message(ReputationManager, inform, _, _, reviewsAnswer(Product, ListOfReviews) ) <- true |
  %{
    %UpdateReviews(Product,ListOfReviews);
  %}
